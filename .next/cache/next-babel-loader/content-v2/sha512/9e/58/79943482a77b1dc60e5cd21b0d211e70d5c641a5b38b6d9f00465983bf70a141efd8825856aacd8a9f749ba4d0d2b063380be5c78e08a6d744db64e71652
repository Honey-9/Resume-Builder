{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/honey/Documents/Resume builder/components/drag&drop/ReorderExperience.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { v4 as uuidv4 } from 'uuid';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Fragment } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { addExperienceData, addSampleExperienceData, deleteSingleExperienceData } from '../../redux/actions/resumeActions';\nimport { Drawer, makeStyles, useMediaQuery } from '@material-ui/core';\nimport clsx from 'clsx';\nimport EditSingleExperience from '../forms/EditSingleExperience';\nimport ExperienceCard from \"../cards/ExperienceCard\";\n\nconst ReorderExperience = ({\n  closeDrawer,\n  anchor\n}) => {\n  // media Query\n  const matches = useMediaQuery('(min-width:1024px)');\n  const dispatch = useDispatch(); // Fetch Global State \n\n  const experiences = useSelector(state => state.resume.data.experiences); // Local Experiences State for drag and drop\n\n  const {\n    0: exp,\n    1: setExp\n  } = useState(experiences);\n  const experienceStates = {};\n  exp.forEach(exp => experienceStates[exp.id] = false); // \n\n  const {\n    0: experienceActive,\n    1: setExperienceActive\n  } = useState(_objectSpread({}, experienceStates)); // This to keep track of localState if one of the experiences have been updated to update state in useEffect\n\n  const {\n    0: edit,\n    1: setEdit\n  } = useState(false);\n  const expDrawerStatesObj = {};\n  exp.map(exp => expDrawerStatesObj[exp.id] = false);\n  useEffect(() => {\n    if (!(experiences.length === exp.length)) {\n      setExp(experiences);\n    }\n\n    if (edit) {\n      setExp(experiences);\n      setEdit(false);\n    }\n  }, [experiences, exp, edit]);\n  const useStyles = makeStyles({\n    list: {\n      width: matches ? '50vw' : '100vw',\n      // width: '50vw',\n      minHeight: matches ? '0' : '100vh'\n    },\n    fullList: {\n      width: 'auto'\n    }\n  });\n  const classes = useStyles(); // Nested Drawer States\n\n  const [expDrawerStates, setExpDrawerStates] = React.useState(_objectSpread({}, expDrawerStatesObj));\n\n  const toggleExpDrawerStates = (id, open) => event => {\n    setExpDrawerStates(_objectSpread(_objectSpread({}, expDrawerStates), {}, {\n      [id]: open\n    }));\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const items = Array.from(exp);\n    const [reorderItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderItem);\n    setExp(items);\n  };\n\n  const grid = 10;\n\n  const getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    transition: 'height 0.2s',\n    overflow: 'hidden',\n    // change background colour if dragging\n    background: isDragging ? '#1abc9c95' : '#1abc9c'\n  }, draggableStyle);\n\n  const getListStyle = isDraggingOver => ({// background: isDraggingOver ? '#ffffff' : '#16a085',\t\t\n  });\n\n  const disableActiveExp = () => {\n    const clone = Object.create(experienceActive);\n    const ids = Object.keys(clone); // create an object that will be passed as in state \n    // which we will use to disable the rest state (false)\n    // this will ensure at one time only one is active\n\n    const fakeState = {}; // assign each state false\n\n    ids.forEach(id => {\n      fakeState[id] = false;\n    }); // setActive only the one that gets clicked \n\n    setExperienceActive(fakeState);\n  };\n\n  const onClickExp = ({\n    id\n  }) => {\n    // CLone the activeExperiences State\n    const clone = Object.create(experienceActive); // check if the clicked experience is already active then disable it and return \n\n    if (clone[id]) {\n      setExperienceActive(p => _objectSpread(_objectSpread({}, p), {}, {\n        [id]: false\n      }));\n      return;\n    } // Get All Ids from state in an Array\n\n\n    const ids = Object.keys(clone); // create an object that will be passed as in state \n    // which we will use to disable the rest state (false)\n    // this will ensure at one time only one is active\n\n    const fakeState = {}; // assign each state false\n\n    ids.forEach(id => {\n      fakeState[id] = false;\n    }); // setActive only the one that gets clicked \n\n    setExperienceActive(p => _objectSpread(_objectSpread({}, ids), {}, {\n      [id]: true\n    }));\n  };\n\n  const onDelete = ({\n    id\n  }) => {\n    dispatch(deleteSingleExperienceData(id));\n  };\n\n  const save = () => {\n    dispatch(addExperienceData(exp));\n    closeDrawer(anchor, false);\n  };\n\n  const onAdd = () => {\n    dispatch(addSampleExperienceData({\n      id: uuidv4(),\n      designation: 'Sample Designation',\n      company: 'Company Description',\n      description: 'Sample Description',\n      start: undefined,\n      end: undefined,\n      years: '1',\n      country: 'Sample Country'\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-start flex-wrap lg:flex-nowrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full md:w-auto mb-4 md:mb-0\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \"lg:px-4 lg:py-2 mr-4\",\n          onClick: () => closeDrawer(anchor, false),\n          color: \"default\",\n          variant: \"text\",\n          children: [' ', /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 4\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ml-2 capitalize\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"lg:px-4 lg:py-2 mr-4\",\n        onClick: onAdd,\n        color: \"primary\",\n        variant: \"outlined\",\n        children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ml-2 capitalize\",\n          children: \"Add Experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"lg:px-4 lg:py-2\",\n        onClick: save,\n        color: \"primary\",\n        variant: \"contained\",\n        children: [/*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"ml-2 capitalize\",\n          children: \"Save Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: 'experiences',\n        children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({\n          style: getListStyle(snapshot.isDraggingOver),\n          className: \"pb-10 pt-8 rounded\"\n        }, provided.droppableProps), {}, {\n          ref: provided.innerRef,\n          onClick: () => {\n            if (snapshot.isDraggingOver) {\n              disableActiveExp();\n            }\n          },\n          children: [exp.map((e, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: e.id,\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread(_objectSpread({\n              onClick: () => onClickExp({\n                id: e.id\n              }),\n              className: \"p-6 text-white text-lg bg-primary rounded\"\n            }, provided.draggableProps), provided.dragHandleProps), {}, {\n              ref: provided.innerRef,\n              style: _objectSpread({}, getItemStyle(snapshot.isDragging, provided.draggableProps.style)),\n              children: /*#__PURE__*/_jsxDEV(ExperienceCard, _objectSpread(_objectSpread({}, e), {}, {\n                onDelete: onDelete,\n                openEditExpForm: toggleExpDrawerStates(e.id, true),\n                experienceActive: experienceActive\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 11\n              }, this)\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 11\n            }, this)\n          }, e.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 8\n          }, this)), provided.placeholder]\n        }), void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 3\n    }, this), exp.map(exp => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Drawer, {\n        anchor: 'left',\n        open: expDrawerStates[exp.id],\n        onClose: toggleExpDrawerStates(exp.id, false),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: clsx(classes.list),\n          role: \"presentation\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pt-10 pl-10\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex align-center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                className: \"px-4 py-2\",\n                onClick: toggleExpDrawerStates(exp.id, false),\n                color: \"default\",\n                variant: \"outlined\",\n                children: [/*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 6\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"ml-2 capitalize\",\n                  children: \"Back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 5\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(EditSingleExperience, {\n              anchor: anchor,\n              experience: exp,\n              setEdit: setEdit,\n              closeDrawer: toggleExpDrawerStates(exp.id, false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 4\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 3\n      }, this)\n    }, exp.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 3\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 3\n  }, this);\n};\n\nexport default ReorderExperience;\nconst ButtonData = [{\n  btnClasses: `lg:px-4 lg:py-2 mr-4`,\n  color: 'default',\n  variant: 'text',\n  Icon: ArrowBackIcon,\n  btnTextClasses: 'ml-2 capitalize'\n}];\n\nconst DrawerButton = ({\n  btnClasses,\n  color,\n  variant,\n  Icon,\n  btnTextClasses,\n  children,\n  onClick\n}) => /*#__PURE__*/_jsxDEV(Button, {\n  className: btnClasses,\n  onClick: onClick,\n  color: color,\n  variant: variant,\n  children: [/*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    className: btnTextClasses,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 306,\n  columnNumber: 2\n}, this);","map":{"version":3,"sources":["/home/honey/Documents/Resume builder/components/drag&drop/ReorderExperience.js"],"names":["React","useState","useEffect","useRef","DragDropContext","Droppable","Draggable","useDispatch","useSelector","Button","v4","uuidv4","ArrowBackIcon","Fragment","AddIcon","SaveIcon","addExperienceData","addSampleExperienceData","deleteSingleExperienceData","Drawer","makeStyles","useMediaQuery","clsx","EditSingleExperience","ExperienceCard","ReorderExperience","closeDrawer","anchor","matches","dispatch","experiences","state","resume","data","exp","setExp","experienceStates","forEach","id","experienceActive","setExperienceActive","edit","setEdit","expDrawerStatesObj","map","length","useStyles","list","width","minHeight","fullList","classes","expDrawerStates","setExpDrawerStates","toggleExpDrawerStates","open","event","onDragEnd","result","destination","items","Array","from","reorderItem","splice","source","index","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","transition","overflow","background","getListStyle","isDraggingOver","disableActiveExp","clone","Object","create","ids","keys","fakeState","onClickExp","p","onDelete","save","onAdd","designation","company","description","start","undefined","end","years","country","provided","snapshot","droppableProps","innerRef","e","draggableProps","dragHandleProps","style","placeholder","ButtonData","btnClasses","color","variant","Icon","btnTextClasses","DrawerButton","children","onClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { v4 as uuidv4 } from 'uuid';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Fragment } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { addExperienceData, addSampleExperienceData, deleteSingleExperienceData } from '../../redux/actions/resumeActions';\nimport { Drawer, makeStyles, useMediaQuery } from '@material-ui/core';\nimport clsx from 'clsx';\nimport EditSingleExperience from '../forms/EditSingleExperience';\nimport ExperienceCard from \"../cards/ExperienceCard\"\n\nconst ReorderExperience = ({closeDrawer, anchor}) => {\n\t// media Query\n\tconst matches = useMediaQuery('(min-width:1024px)');\n\tconst dispatch = useDispatch();\n\n\t// Fetch Global State \n\tconst experiences = useSelector((state) => state.resume.data.experiences)\n\n\t// Local Experiences State for drag and drop\n\tconst [exp, setExp] = useState(experiences);\n\tconst experienceStates = {};\n\texp.forEach((exp) => (experienceStates[exp.id] = false));\n\t// \n\tconst [experienceActive, setExperienceActive] = useState({...experienceStates});\n\n\t// This to keep track of localState if one of the experiences have been updated to update state in useEffect\n\tconst [edit, setEdit] = useState(false)\n\n\tconst expDrawerStatesObj = {};\n\texp.map((exp) => (expDrawerStatesObj[exp.id] = false));\n\n\tuseEffect(() => {\n\t\tif(!(experiences.length === exp.length)){\n\t\t\tsetExp(experiences)\n\t\t}\n\t\tif(edit) {\n\t\t\tsetExp(experiences)\n\t\t\tsetEdit(false)\n\t\t}\n\t},[experiences, exp, edit])\n\n\tconst useStyles = makeStyles({\n\t\tlist: {\n\t\t\twidth: matches ? '50vw' : '100vw',\n\t\t\t// width: '50vw',\n\t\t\tminHeight: matches ? '0' : '100vh',\n\t\t},\n\t\tfullList: {\n\t\t\twidth: 'auto',\n\t\t},\n\t});\n\tconst classes = useStyles();\n\n\t// Nested Drawer States\n\tconst [expDrawerStates, setExpDrawerStates] = React.useState({ ...expDrawerStatesObj });\n\tconst toggleExpDrawerStates = (id, open) => (event) => {\n\t\tsetExpDrawerStates({ ...expDrawerStates, [id]: open });\n\t};\n\tconst onDragEnd = (result) => {\n\t\tif (!result.destination) return;\n\t\tconst items = Array.from(exp);\n\t\tconst [reorderItem] = items.splice(result.source.index, 1);\n\t\titems.splice(result.destination.index, 0, reorderItem);\n\t\tsetExp(items);\n\t};\n\n\tconst grid = 10;\n\tconst getItemStyle = (isDragging, draggableStyle) =>  ({\n\t\t\t// some basic styles to make the items look a bit nicer\n\t\t\tuserSelect: 'none',\n\t\t\tpadding: grid * 2,\n\t\t\tmargin: `0 0 ${grid}px 0`,\n\t\t\ttransition: 'height 0.2s',\n\t\t\toverflow: 'hidden',\n\t\n\t\t\t// change background colour if dragging\n\t\t\tbackground: isDragging ? '#1abc9c95' : '#1abc9c',\n\t\t\t\n\t\t\t// styles we need to apply on draggables\n\t\t\t...draggableStyle,\n\t\t});\n\n\tconst getListStyle = (isDraggingOver) => ({\n\t\t// background: isDraggingOver ? '#ffffff' : '#16a085',\t\t\n\t});\n\n\tconst disableActiveExp = () => {\n\t\tconst clone = Object.create(experienceActive)\n\n\t\tconst ids = Object.keys(clone);\n\n\t\t// create an object that will be passed as in state \n\t\t// which we will use to disable the rest state (false)\n\t\t// this will ensure at one time only one is active\n\t\tconst fakeState = {}\n\n\t\t// assign each state false\n\t\tids.forEach((id) => {fakeState[id] = false })\n\n\t\t// setActive only the one that gets clicked \n\t\tsetExperienceActive(fakeState)\t\n\t}\n\n\n\tconst onClickExp = ({id}) => {\n\n\t\t// CLone the activeExperiences State\n\t\tconst clone = Object.create(experienceActive)\n\n\t\t// check if the clicked experience is already active then disable it and return \n\t\tif(clone[id]) {\n\t\t\tsetExperienceActive(p => ({\n\t\t\t\t...p,\n\t\t\t\t[id]: false\n\t\t\t}))\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// Get All Ids from state in an Array\n\t\tconst ids = Object.keys(clone);\n\n\t\t// create an object that will be passed as in state \n\t\t// which we will use to disable the rest state (false)\n\t\t// this will ensure at one time only one is active\n\t\tconst fakeState = {}\n\n\t\t// assign each state false\n\t\tids.forEach((id) => {fakeState[id] = false })\n\n\t\t// setActive only the one that gets clicked \n\t\tsetExperienceActive(p => ({\n\t\t\t...ids,\n\t\t\t[id]: true\n\t\t}))\n\t}\n\n\tconst onDelete = ({id}) => {\n\t\tdispatch(deleteSingleExperienceData(id))\n\t}\n\n\tconst save = () => {\n\t\tdispatch(addExperienceData(exp));\n\t\tcloseDrawer(anchor, false);\n\t}\n\n\tconst onAdd = () => {\n\t\tdispatch(addSampleExperienceData({\n\t\t\tid: uuidv4(),\n\t\t\tdesignation: 'Sample Designation',\n\t\t\tcompany: 'Company Description',\n\t\t\tdescription: 'Sample Description',\n\t\t\tstart: undefined,\n\t\t\tend: undefined,\n\t\t\tyears: '1',\n\t\t\tcountry: 'Sample Country',\n\t\t}))\n\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t<div className='flex items-center justify-start flex-wrap lg:flex-nowrap'>\n\t\t<div className='w-full md:w-auto mb-4 md:mb-0'>\n\t\t<Button\n\t\t\tclassName='lg:px-4 lg:py-2 mr-4'\n\t\t\tonClick={() => closeDrawer(anchor, false)}\n\t\t\tcolor='default'\n\t\t\tvariant='text'\n\t\t\t>\n\t\t\t{' '}\n\t\t\t<ArrowBackIcon /><p className='ml-2 capitalize'>Back</p>\n\t\t</Button>\n\t\t</div>\n\t\t<Button\n\t\t\tclassName='lg:px-4 lg:py-2 mr-4'\n\t\t\tonClick={onAdd}\n\t\t\tcolor='primary'\n\t\t\tvariant='outlined'\n\t\t\t>\n\t\t\t<AddIcon /><p className='ml-2 capitalize'>Add Experience</p>\n\t\t</Button>\n\t\t<Button\n\t\t\tclassName='lg:px-4 lg:py-2'\n\t\t\tonClick={save}\n\t\t\tcolor='primary'\n\t\t\tvariant='contained'\n\t\t\t>\n\t\t\t<SaveIcon /><p className='ml-2 capitalize'>Save Order</p>\n\t\t</Button>\n\t\t</div>\n\t\t<DragDropContext onDragEnd={onDragEnd}>\n\t\t\t<Droppable droppableId={'experiences'}>\n\t\t\t\t{(provided,snapshot) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={getListStyle(snapshot.isDraggingOver)}\n\t\t\t\t\t\tclassName='pb-10 pt-8 rounded'\n\t\t\t\t\t\t{...provided.droppableProps}\n\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tif(snapshot.isDraggingOver) {\n\t\t\t\t\t\t\t\tdisableActiveExp()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{exp.map((e, index) => (\n\t\t\t\t\t\t\t<Draggable\n\t\t\t\t\t\t\t\tkey={e.id}\n\t\t\t\t\t\t\t\tdraggableId={e.id}\n\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{(provided,snapshot) => (\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => onClickExp({id: e.id})}\n\t\t\t\t\t\t\t\t\t\t\tclassName='p-6 text-white text-lg bg-primary rounded'\n\t\t\t\t\t\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{...getItemStyle(\n\t\t\t\t\t\t\t\t\t\t\t\tsnapshot.isDragging,\n\t\t\t\t\t\t\t\t\t\t\t\tprovided.draggableProps.style,\n\t\t\t\t\t\t\t\t\t\t\t  ),\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ExperienceCard\n\t\t\t\t\t\t\t\t\t\t{...e}\n\t\t\t\t\t\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t\t\t\t\t\t\topenEditExpForm={toggleExpDrawerStates(e.id, true)}\n\t\t\t\t\t\t\t\t\t\texperienceActive={experienceActive} \n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t{provided.placeholder}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Droppable>\n\t\t</DragDropContext>\n\t\n\t{exp.map((exp) => (\n\t\t<div key={exp.id} >\n\t\t<Drawer\n\t\tanchor={'left'}\n\t\topen={expDrawerStates[exp.id]}\n\t\tonClose={toggleExpDrawerStates(exp.id, false)}\n\t\t>\n\t\t<div\n\t\t\tclassName={clsx(classes.list)}\n\t\t\trole='presentation'\n\t\t>\n\t\t\t<div className='pt-10 pl-10'>\n\t\t\t\t<div className='flex align-center'>\n\t\t\t\t<Button\n\t\t\t\t\tclassName='px-4 py-2'\n\t\t\t\t\tonClick={toggleExpDrawerStates(exp.id, false)}\n\t\t\t\t\tcolor='default'\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t>\n\t\t\t\t\t<ArrowBackIcon /><p className='ml-2 capitalize'>Back</p>\n\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<EditSingleExperience\n\t\t\t\tanchor={anchor}\n\t\t\t\texperience={exp}\n\t\t\t\tsetEdit={setEdit}\n\t\t\t\tcloseDrawer={toggleExpDrawerStates(exp.id, false)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{/*<Divider />*/}\n\t\t</div>\n\t\t</Drawer>\n\t\t</div>\n\t))}\n\t</Fragment>\n\t\t);\n};\n\nexport default ReorderExperience;\n\n\nconst ButtonData = [\n\t{\n\t\tbtnClasses: `lg:px-4 lg:py-2 mr-4`,\n\t\tcolor: 'default',\n\t\tvariant: 'text',\n\t\tIcon: ArrowBackIcon,\n\t\tbtnTextClasses: 'ml-2 capitalize',\n\t},\n]\n\nconst DrawerButton = ({\n\tbtnClasses,\n\tcolor,\n\tvariant,\n\tIcon,\n\tbtnTextClasses,\n\tchildren,\n\tonClick\n}) => (\n\t<Button\n\t\tclassName={btnClasses}\n\t\tonClick={onClick}\n\t\tcolor={color}\n\t\tvariant={variant}\n\t>\n\t\t<Icon />\n\t\t<p className={btnTextClasses}>{children}</p>\n\t</Button>\n)\n"]},"metadata":{},"sourceType":"module"}